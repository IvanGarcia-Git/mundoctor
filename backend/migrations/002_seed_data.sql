-- Mundoctor Database Seed Data
-- Migration: 002_seed_data.sql
-- Description: Insert initial seed data for specialties and demo users
-- Date: 2025-06-28

-- Insert medical specialties
INSERT INTO specialties (id, name, description, icon) VALUES
    (uuid_generate_v4(), 'Cardiología', 'Especialista en enfermedades del corazón y sistema cardiovascular', 'heart'),
    (uuid_generate_v4(), 'Dermatología', 'Especialista en enfermedades de la piel, cabello y uñas', 'user'),
    (uuid_generate_v4(), 'Endocrinología', 'Especialista en hormonas y glándulas endocrinas', 'activity'),
    (uuid_generate_v4(), 'Gastroenterología', 'Especialista en sistema digestivo', 'zap'),
    (uuid_generate_v4(), 'Ginecología', 'Especialista en salud femenina y sistema reproductivo', 'user-check'),
    (uuid_generate_v4(), 'Neurología', 'Especialista en sistema nervioso', 'brain'),
    (uuid_generate_v4(), 'Oftalmología', 'Especialista en ojos y visión', 'eye'),
    (uuid_generate_v4(), 'Otorrinolaringología', 'Especialista en oído, nariz y garganta', 'mic'),
    (uuid_generate_v4(), 'Pediatría', 'Especialista en salud infantil', 'baby'),
    (uuid_generate_v4(), 'Psiquiatría', 'Especialista en salud mental', 'brain'),
    (uuid_generate_v4(), 'Traumatología', 'Especialista en huesos, músculos y articulaciones', 'activity'),
    (uuid_generate_v4(), 'Urología', 'Especialista en sistema urinario', 'droplet'),
    (uuid_generate_v4(), 'Medicina General', 'Médico de atención primaria', 'stethoscope'),
    (uuid_generate_v4(), 'Nutrición', 'Especialista en alimentación y nutrición', 'apple'),
    (uuid_generate_v4(), 'Psicología', 'Especialista en salud mental y bienestar emocional', 'heart'),
    (uuid_generate_v4(), 'Fisioterapia', 'Especialista en rehabilitación física', 'activity');

-- Demo Admin User (will be created via Clerk webhook when admin signs up)
-- This is just reference data - actual user creation happens through Clerk

-- Demo data comments for future reference:
-- When implementing Clerk webhook, these are the demo users that should be created:

/*
DEMO USERS TO CREATE VIA CLERK:

1. Admin User:
   - Email: admin@mundoctor.com
   - Name: Administrador Mundoctor
   - Role: admin
   - Clerk ID: will be generated by Clerk

2. Demo Professional:
   - Email: dr.garcia@mundoctor.com
   - Name: Dr. Ana García
   - Role: professional
   - Specialty: Cardiología
   - License: MP12345
   - DNI: 12345678
   - City: Buenos Aires
   - Subscription: basic

3. Demo Patient:
   - Email: paciente@mundoctor.com
   - Name: María Rodriguez
   - Role: patient
   - Date of Birth: 1985-03-15
   - Phone: +54 11 1234-5678
*/

-- Insert default user preferences template
-- This will be used when creating new users
-- Actual user preferences will be created via webhook when users sign up

-- Create a function to initialize user preferences for new users
CREATE OR REPLACE FUNCTION create_default_user_preferences(user_uuid UUID)
RETURNS VOID AS $$
BEGIN
    INSERT INTO user_preferences (
        user_id,
        theme,
        notifications_enabled,
        email_notifications,
        sms_notifications,
        language,
        timezone
    ) VALUES (
        user_uuid,
        'system',
        TRUE,
        TRUE,
        FALSE,
        'es',
        'America/Argentina/Buenos_Aires'
    );
END;
$$ LANGUAGE plpgsql;

-- Create a function to initialize patient profile
CREATE OR REPLACE FUNCTION create_patient_profile(user_uuid UUID)
RETURNS VOID AS $$
BEGIN
    INSERT INTO patients (
        user_id,
        accepted_communications
    ) VALUES (
        user_uuid,
        FALSE
    );
END;
$$ LANGUAGE plpgsql;

-- Create a function to initialize professional profile
CREATE OR REPLACE FUNCTION create_professional_profile(
    user_uuid UUID,
    license_num VARCHAR(255),
    dni_num VARCHAR(20),
    specialty_name VARCHAR(100) DEFAULT 'Medicina General'
)
RETURNS VOID AS $$
DECLARE
    specialty_uuid UUID;
BEGIN
    -- Get specialty ID
    SELECT id INTO specialty_uuid 
    FROM specialties 
    WHERE name = specialty_name;
    
    -- If specialty not found, use Medicina General
    IF specialty_uuid IS NULL THEN
        SELECT id INTO specialty_uuid 
        FROM specialties 
        WHERE name = 'Medicina General';
    END IF;
    
    INSERT INTO professionals (
        user_id,
        license_number,
        dni,
        specialty_id,
        subscription_plan,
        verified,
        profile_completed
    ) VALUES (
        user_uuid,
        license_num,
        dni_num,
        specialty_uuid,
        'free',
        FALSE,
        FALSE
    );
END;
$$ LANGUAGE plpgsql;

-- Create default schedule for professionals (Monday to Friday, 9 AM to 5 PM)
CREATE OR REPLACE FUNCTION create_default_schedule(professional_uuid UUID)
RETURNS VOID AS $$
BEGIN
    -- Monday to Friday
    INSERT INTO professional_schedules (professional_id, day_of_week, start_time, end_time, break_start, break_end)
    VALUES 
        (professional_uuid, 1, '09:00:00', '17:00:00', '12:00:00', '13:00:00'), -- Monday
        (professional_uuid, 2, '09:00:00', '17:00:00', '12:00:00', '13:00:00'), -- Tuesday
        (professional_uuid, 3, '09:00:00', '17:00:00', '12:00:00', '13:00:00'), -- Wednesday
        (professional_uuid, 4, '09:00:00', '17:00:00', '12:00:00', '13:00:00'), -- Thursday
        (professional_uuid, 5, '09:00:00', '17:00:00', '12:00:00', '13:00:00'); -- Friday
END;
$$ LANGUAGE plpgsql;

-- Views for easier data access

-- View for professional profiles with specialty information
CREATE VIEW professional_profiles AS
SELECT 
    p.id,
    p.user_id,
    u.clerk_id,
    u.name,
    u.email,
    u.phone,
    u.avatar_url,
    p.license_number,
    p.dni,
    s.name as specialty_name,
    s.icon as specialty_icon,
    p.subscription_plan,
    p.consultation_fee,
    p.city,
    p.address,
    p.latitude,
    p.longitude,
    p.rating,
    p.total_reviews,
    p.office_hours,
    p.services,
    p.about,
    p.education,
    p.experience_years,
    p.languages,
    p.verified,
    p.profile_completed,
    p.created_at,
    p.updated_at
FROM professionals p
JOIN users u ON p.user_id = u.id
LEFT JOIN specialties s ON p.specialty_id = s.id;

-- View for patient profiles
CREATE VIEW patient_profiles AS
SELECT 
    pt.id,
    pt.user_id,
    u.clerk_id,
    u.name,
    u.email,
    u.phone,
    u.avatar_url,
    pt.accepted_communications,
    pt.emergency_contact,
    pt.insurance_info,
    pt.medical_history,
    pt.date_of_birth,
    pt.gender,
    pt.address,
    pt.created_at,
    pt.updated_at
FROM patients pt
JOIN users u ON pt.user_id = u.id;

-- View for appointments with full details
CREATE VIEW appointment_details AS
SELECT 
    a.id,
    a.appointment_date,
    a.duration,
    a.status,
    a.type,
    a.notes,
    a.prescription,
    a.fee,
    a.meeting_url,
    a.patient_symptoms,
    a.diagnosis,
    -- Patient information
    pt.name as patient_name,
    pt.email as patient_email,
    pt.phone as patient_phone,
    -- Professional information
    pr.name as professional_name,
    pr.email as professional_email,
    pr.phone as professional_phone,
    pr.specialty_name,
    pr.consultation_fee as professional_fee,
    a.created_at,
    a.updated_at
FROM appointments a
JOIN patient_profiles pt ON a.patient_id = pt.id
JOIN professional_profiles pr ON a.professional_id = pr.id;